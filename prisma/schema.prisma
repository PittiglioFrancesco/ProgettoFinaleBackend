generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model comments {
//   id         Int    @id @default(autoincrement())
//   content    String   @db.VarChar(255)
//   created_at String   @db.VarChar(255)
//   profile_id Int
//   post_id    Int
//   posts      posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_post_id_comments")
//   profiles   profiles? @relation(fields: [profile_id], references: [id], onDelete: Cascade, map: "fk_profile_id_comments")

//   @@index([post_id], map: "fk_post_id_comments")
//   @@index([profile_id], map: "fk_profile_id_comments")
// }

model posttag {
  postId Int
  tagId  Int
  posts   posts?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  tags    tags?   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@id([postId, tagId])
}

model posts {
  id          Int     @id @default(autoincrement())
  description String?    @db.VarChar(255)
  createdAt  String    @db.VarChar(255)
  profileId  Int
  // comments    comments[]
  posttag    posttag[] 
  profiles    profiles?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model profiles {
  id        Int     @id @default(autoincrement())
  username  String   @db.VarChar(255)
  birthdate String    @db.VarChar(255)
  userId   Int
  // comments  comments[]
  posts     posts[]
  users     users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model tags {
  id       Int     @id @default(autoincrement())
  name     String    @db.VarChar(255)
  postTag posttag[] 
}

model users {
  id       Int     @id @default(autoincrement())
  email    String   @unique @db.VarChar(255)
  password String    @db.VarChar(255)
  profiles profiles[]
}
